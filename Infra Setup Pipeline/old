/* groovylint-disable DuplicateStringLiteral */
import java.net.URLEncoder

constName = '' // -> Extract the Package name of Project
tomcatName = ''//*// //-> Please input the exact name that needs to be given in production site.

pipeline {
    agent any

    tools {
        //jdk 'Java8'//, version: '8u392-ga-1'
        //jdk 'Java11'//, version: '11.0.22'
        jdk 'Java17'//, version: '17.0.10'
        //jdk 'Java21'//, version: '21.0.2'
    }

    environment {
        useSonar = 'true'

        tomcatRepo = ''

        //Deployment Server Variable
        ssh_Credentials_APP1 = 'SSH_Generic_Tomcat'                               // *
        deployment_Server_IP_APP1 = '10.1.1.137'                              // *
        deployment_Server_Port_APP1 = '8881'                                  // *
        tomcat_dir = '/app/devops_demo/apache-tomcat-9.0.73'                  // *
        tomcatCreds = 'Tomcat-Manager-Page-Devops'                 

        //E-MAIL Variables
        RECIPIENTS_NAME = 'gourav.singh@mobicule.com'
        PASS_SUBJECT = '\${DEFAULT_SUBJECT}'
        PASS_CONTENT = 'Jenkins Pipeline Build \${BUILD_NUMBER} Passed Successfully \n \${DEFAULT_CONTENT}'
        UNSTABLE_SUBJECT = '\${DEFAULT_SUBJECT}'
        UNSTABLE_CONTENT = 'Jenkins Pipeline Build ${BUILD_NUMBER} is UNSTABLE \${DEFAULT_CONTENT}'
        FAIL_SUBJECT = '\${DEFAULT_SUBJECT}'
        FAIL_CONTENT = 'Jenkins Pipeline Build \${BUILD_NUMBER} FAILED... Attention Required! \${DEFAULT_CONTENT}'
    }

    stages {
        stage('Pre-Condition Check') {
            steps {
                script {
                    if (useSonar == 'true') {
                        // Check SonarQube Server availability
                        echo "SonarQube IP: ${env.sonarqube_ip}, Port: ${env.sonarqube_port}"
                        netCheck(env.sonarqube_ip, env.sonarqube_port, 'SonarQube')
                    }
                }
            }
        }

        stage('Clean Workspace') {
            steps {
                script {
                    echo 'Pausing the pipeline...'
                    input message: '''Clean Directory
                    Do you want to continue?''', ok: 'Resume'
                    echo 'Resuming the pipeline...'
                    
                    //cleanWs()
                    echo "Workspace Cleaned"
                    sh "rm -rf \${JENKINS_HOME}/workspace/\${JOB_NAME}/*"
                }
            }
        }

        stage('Git Pull') {
            steps {
                script {
                    def branchName = env.GIT_BRANCH.replaceAll('^origin/', '')
                    checkout([$class: 'GitSCM',
                        branches: [[name: branchName]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        userRemoteConfigs: [[credentialsId: gitCredentials, url: GIT_URL]]])
                    echo "${GIT_URL}" //Git URL is selected on the pipeline configuration page
                    echo "${GIT_BRANCH}" //Git Branch is selected on the pipeline configuration page
                }
            }
        }

        stage('Check Project Build Tool') {
            steps {
                script {
                    sh '''
                        java -version
                        javac -version
                    '''
                    echo 'Check Build Tool (Gradle or Maven....)'
                    projectType = 'Maven'
                    if (fileExists('build.gradle')) {
                        projectType = 'Gradle'
                        echo 'Gradle project detected'
                        sh 'gradle -version'
                    } else if (fileExists('pom.xml')) {
                        projectType = 'Maven'
                        echo 'Maven project detected'
                    } else {
                        error 'No build file found! Not a valid Gradle or Maven project.'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            when {
                expression { useSonar == 'true' }
            }
            steps {
                script {
                    if (projectType == 'Gradle') {
                        echo 'Running SonarQube analysis...'
                        // Set GRADLE_OPTS to increase the memory allocation
                        withEnv(["GRADLE_OPTS=-Xmx4096m -Dorg.gradle.daemon=true -Dorg.gradle.jvmargs='-Xmx4096m'"]) {
                            sh """
                                cd \${JENKINS_HOME}/workspace/\${JOB_NAME}
                                chmod +x gradlew

                                ./gradlew sonar \
                                -Dsonar.projectKey=$sonar_project_key \
                                -Dsonar.host.url=http://$sonarqube_ip:$sonarqube_port \
                                -Dsonar.token=$sonar_login_token
                            """
                        }
                    } else if (projectType == 'Maven') {
                        sh """
                            echo "Running SonarQube analysis..."
                            cd \${JENKINS_HOME}/workspace/\${JOB_NAME}

                            mvn clean verify sonar:sonar \
                                -Dsonar.projectKey=\$sonar_project_key \
                                -Dsonar.host.url=http://\${sonarqube_ip}:\${sonarqube_port} \
                                -Dsonar.login=\${sonar_login_token}
                        """
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    warPath = ''
                    if (projectType == 'Gradle') {
                        warPath = 'build/libs'
                        echo 'Building Project Artifact using Gradle'
                        withEnv(["GRADLE_OPTS=-Xmx4096m -Dorg.gradle.daemon=true -Dorg.gradle.jvmargs='-Xmx4096m'"]) {
                        sh 'chmod +x gradlew'
                        sh """
                            #sed -i 's/@db.properties@/${appProperties}/' src/main/resources/application.properties
                            ./gradlew assemble -Dorg.gradle.java.home="/usr/lib/jvm/java-11-openjdk"
                            #ls -lah ${JENKINS_HOME}/workspace/${JOB_NAME}/build/libs/
                        """
                        }
                    } else if (projectType == 'Maven') {
                        warPath = 'target'
                        echo 'Building Project Artifact using Maven...'
                        dir("${JENKINS_HOME}/workspace/${JOB_NAME}") {
                            sh 'mvn clean package install -f pom.xml'
                        }
                    }
                    // sh """
                    //     mv ${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/*.war ${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/${prodName}.war
                    //     ls -lah ${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/
                    // """
                    sh """
                        warFile=\$(ls ${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/*.war | head -n 1)
                        echo "Source file: \$warFile"
                        echo "Destination file: ${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/${prodName}.war"

                        if [ "\$warFile" != "${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/${prodName}.war" ]; then
                            mv \$warFile ${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/${prodName}.war
                            echo "File renamed successfully."
                        else
                            echo "File name is perfect, no need to change"
                        fi

                        ls -lah ${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/
                    """
                    getName("${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/*.war")

                    filename = sh(script: "ls ${JENKINS_HOME}/workspace/${JOB_NAME}/${warPath}/${warFileName}", returnStdout:true).trim()
                    appName = sh(script: """basename ${filename} | sed 's/##.*//'""", returnStdout:true).trim()
                    echo "Application Name: $appName"
                }
            }
        }
    }

    post {
        always {
            script {
                if (currentBuild.currentResult == 'FAILURE') {
                    sh 'echo "Build result has changed to FAILURE"'
                    emailext subject: "${FAIL_SUBJECT}",
                        body: "${FAIL_CONTENT}",
                        attachLog: true,
                        to: "${RECIPIENTS_NAME}"
                } else if (currentBuild.currentResult == 'UNSTABLE') {
                    sh 'echo "Build result has changed to UNSTABLE"'
                    emailext subject: "${UNSTABLE_SUBJECT}",
                        body: "${UNSTABLE_CONTENT}",
                        attachLog: true,
                        to: "${RECIPIENTS_NAME}"
                } else if (currentBuild.currentResult == 'SUCCESS') {
                    sh 'echo "Build SUCCESS"'
                    /* /////////////////////////
                    emailext subject: "${PASS_SUBJECT}",
                        body: "${PASS_CONTENT}",
                        attachLog: true,
                        // recipientProviders: [
                        //     [$class: 'CulpritsRecipientProvider'],
                        //     [$class: 'DevelopersRecipientProvider'],
                        //     [$class: 'RequesterRecipientProvider']
                        // ],
                        //replyTo: "${DEFAULT_REPLYTO}",
                        to: "${RECIPIENTS_NAME}"
                ////////////////// */
                } else if (currentBuild.currentResult == 'ABORTED') {
                    sh 'echo "Build result has changed to ABORTED"'
                    emailext subject: "Build ${BUILD_NUMBER} Aborted",
                        body: 'The build was aborted.',
                        attachLog: true,
                        to: "${RECIPIENTS_NAME}"
                } else {
                    sh 'echo "Build result has changed to UNKNOWN"'
                    emailext subject: "Unknown Build ${BUILD_NUMBER}",
                        body: "Unknown Build ${BUILD_NUMBER} ",
                        attachLog: true,
                        to: "${RECIPIENTS_NAME}"
                }
            }
        }
    }
}

def netCheck(String ip, String port, String name) {
    sh """
        echo "Checking ${name} Server availability..."
        nc -zv -w5 ${ip} ${port} || (echo "${name} is not reachable on http://${ip}:${port}, exiting." && exit 1)
        echo "${name} Server is reachable. Continuing with the Test"
    """
}

def getName(String namePath) {
    warFileName = sh(script: "basename ${namePath}", returnStdout: true).trim()
    echo "New WAR file: ${warFileName}"
    env.NEW_WAR_FILE = warFileName
    echo "Value for warFileName -> $warFileName"
}