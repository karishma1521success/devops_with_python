pipeline {
    agent any

    environment {
        ssh_Credentials = 'SSH_P2P_Multitenent_APP1'
        ssh_Server_IP = '10.0.2.101'
        //DOWNLOAD_URL = "http://10.16.164.6:8081/repository/apache-tomcat/apache-tomcat-${tomcatVersion}.zip"
        tomcatUser = 'Paytm' // Replace with the new user name
        tomcatPasswd = 'Paytm@8070' // Replace with the new user's password
        minHeap = '2048'
        maxHeap = '2048'
        tomcatVersion = '9.0.91'
        tomcatPath = '/app/paytm/digital' //Please DO NOT INCLUDE THE TOMCAT NAME IN THE PATH (e.g. /app/digital/apache-tomcat-9.0.91)
        tomcatCreds = 'Tomcat-Manager-Page-Devops'
        tomcatClient = 'Paytm' // Replace with your client name or pass it dynamically
        tomcatPort = '8070'
        tomcatHTTPSPort = '8443'
        tomcatJVMRoute = 'paytmuattomcat1'
        // devopsTCUser = 'devops'
        // devopsTCPasswd = 'devops@8881'

        //Variables for Nexus Server
        NEXUS_VERSION = 'nexus3'
        NEXUS_PROTOCOL = 'http'
        NEXUS_IP = '10.0.2.123' //Only IPv4 and no need to add http:// or https://
        NEXUS_PORT = '8081'
        //NEXUS_URL = '127.0.0.1:8081'
        NEXUS_REPOSITORY = 'apache-tomcat'
        NEXUS_CREDENTIAL_ID = 'nexus_cred'
        ARTIFACT_VERSION = '\${BUILD_NUMBER}'

        //E-MAIL Variables
        RECIPIENTS_NAME = 'gourav.singh@mobicule.com'
        PASS_SUBJECT = '\${DEFAULT_SUBJECT}'
        PASS_CONTENT = 'Jenkins Pipeline Build \${BUILD_NUMBER} Passed Successfully \n \${DEFAULT_CONTENT}'
        UNSTABLE_SUBJECT = '\${DEFAULT_SUBJECT}'
        UNSTABLE_CONTENT = 'Jenkins Pipeline Build ${BUILD_NUMBER} is UNSTABLE \${DEFAULT_CONTENT}'
        FAIL_SUBJECT = '\${DEFAULT_SUBJECT}'
        FAIL_CONTENT = 'Jenkins Pipeline Build \${BUILD_NUMBER} FAILED... Attention Required! \${DEFAULT_CONTENT}'
    }

    stages {
        // stage('Clear Tomcat Installation') {
        //     steps {
        //         script {
        //             echo 'Workspace Cleaned'
        //             clearTomcat = sshExecute("""
        //             rm -rf ${tomcatPath}/*
        //             """)
        //             echo "${clearTomcat}"
        //         }
        //     }
        // }

        stage('Download Tomcat') {
            steps {
                script {
                    echo "Starting the download of Apache Tomcat version: ${tomcatVersion}"

                    withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIAL_ID, usernameVariable: 'NEXUS_CREDENTIAL_USR', passwordVariable: 'NEXUS_CREDENTIAL_PSW')]) {
                        downloadTomcat = sshExecute("""
                        cd ${tomcatPath}
                        pwd
                        #curl -v -u ${NEXUS_CREDENTIAL_USR}:${NEXUS_CREDENTIAL_PSW} http://${NEXUS_IP}:${NEXUS_PORT}/repository/${NEXUS_REPOSITORY}/apache-tomcat-${tomcatVersion}.zip --output ${tomcatPath}/apache-tomcat-${tomcatVersion}.zip
                        #curl -v -u ${NEXUS_CREDENTIAL_USR}:${NEXUS_CREDENTIAL_PSW} http://10.16.164.6:8081/repository/apache-tomcat/apache/tomcat/app/tomcat-app.zip --output ${tomcatPath}/apache-tomcat-${tomcatVersion}.zip
                        curl -v -u ${NEXUS_CREDENTIAL_USR}:${NEXUS_CREDENTIAL_PSW} http://${NEXUS_IP}:${NEXUS_PORT}/repository/${NEXUS_REPOSITORY}/apache/apache-tomcat/${tomcatVersion}/apache-tomcat-${tomcatVersion}.zip --output ${tomcatPath}/apache-tomcat-${tomcatVersion}.zip
                        ls -lah
                        """)
                        echo "${downloadTomcat}"
                    }
                }
            }
        }

        stage('Extract Tomcat') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: ssh_Credentials, usernameVariable: 'SSH_CREDENTIAL_USR', passwordVariable: 'SSH_CREDENTIAL_PSW')]) {
                        extractTomcat = sshExecute("""
                            echo "Unzipping Apache Tomcat in ${tomcatPath}"

                            cd ${tomcatPath}
                            pwd
                            ls -lah
                            unzip apache-tomcat-${tomcatVersion}.zip
                            ls -lah ${tomcatPath}
                            echo "Renaming directory to apache-tomcat-${tomcatVersion}-${tomcatClient}"
                            mv apache-tomcat-${tomcatVersion} apache-tomcat-${tomcatVersion}-${tomcatClient}
                            rm apache-tomcat-${tomcatVersion}.zip
                            ls -lah ${tomcatPath}
                            echo "Creating a backup directory at ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/backup"
                            mkdir -p ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/backup
                            chown -R ${SSH_CREDENTIAL_USR}:${SSH_CREDENTIAL_USR} apache-tomcat-${tomcatVersion}*
                        """)
                        echo "${extractTomcat}"
                    }
                }
            }
        }

        // stage('Update Catalina.sh') {
        //     steps {
        //         script {
        //             updateJavaOpts = sshExecute("""
        //             echo "Updating JAVA_OPTS in the configuration file"

        //             sed -i 's|^JAVA_OPTS=.*|JAVA_OPTS="-server -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:MaxGCPauseMillis=500 -Xms${minHeap} -Xmx${maxHeap} -Xlog:gc*,safepoint=info:file=${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/logs/gc_%p_%t.log:time,uptime:filecount=10 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/heapdumps"|' \
        //             ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh

        //             echo "Updated catalina.sh contents:"
        //             cat ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh | grep JAVA_OPTS="
        //             echo "JAVA_OPTS updated successfully"
        //             """)
        //             echo "${updateJavaOpts}"
        //         }
        //     }
        // }  //-> Done

        stage('Update Catalina.sh') {
            steps {
                script {
                    updateJavaOpts = sshExecute("""
                    echo "Updating JAVA_OPTS in the configuration file"

                    sed -i 's|@heap.min@|${minHeap}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh
                    sed -i 's|@heap.max@|${maxHeap}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh
                    sed -i 's|@tomcat.path@|${tomcatPath}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh
                    sed -i 's|@tomcat.version@|${tomcatVersion}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh
                    sed -i 's|@tomcat.client@|${tomcatClient}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh

                    echo "Updated catalina.sh contents:"
                    cat ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh | grep JAVA_OPTS=
                    echo "JAVA_OPTS updated successfully"
                    """)
                    echo "${updateJavaOpts}"
                }
            }
        }

        // stage('Update Catalina.sh') {
        //     steps {
        //         script {
        //             // Escape `/` in the path variables
        //             def escapedTomcatPath = tomcatPath.replaceAll('/', '\\/')
        //             def escapedTomcatClient = tomcatClient.replaceAll('/', '\\/')

        //             updateJavaOpts = sshExecute("""
        //                 echo "Updating JAVA_OPTS in the configuration file"

        //                 sed -i 's|@heap.min@|${minHeap}|' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh
        //                 sed -i 's|@heap.max@|${maxHeap}|' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh
        //                 sed -i 's|@tomcat.path@|${escapedTomcatPath}|' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh
        //                 sed -i 's|@tomcat.version@|${tomcatVersion}|' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh
        //                 sed -i 's|@tomcat.client@|${escapedTomcatClient}|' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh

        //                 echo "Updated catalina.sh contents:"
        //                 cat ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/catalina.sh | grep JAVA_OPTS=
        //                 echo "JAVA_OPTS updated successfully"
        //             """)
        //             echo "${updateJavaOpts}"
        //         }
        //     }
        // }

        // stage('Update Connector Configuration') {
        //     steps {
        //         script {
        //             updateConnector = sshExecute("""
        //             echo 'Updating Connector configuration in server.xml'

        //             sed -i 's|<Connector port="[0-9]*" \
        //                 protocol="HTTP/1.1" \
        //                 connectionTimeout="[0-9]*" \
        //                 maxPostSize="[0-9]*" \
        //                 redirectPort="8443" \
        //                 maxThreads="1500"/>|<Connector port="8882" \
        //                 protocol="HTTP/1.1" \
        //                 connectionTimeout="30000" \
        //                 maxPostSize="209715200" \
        //                 redirectPort="8443" maxThreads="1500"/>|' \
        //                 ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/server.xml
        //             """)
        //             echo "${updateConnector}"
        //         }
        //     }
        // }

        stage('Update Server Configuration') {
            steps {
                script {
                    updatePort = sshExecute("""
                    echo 'Updating Port configuration in server.xml'

                    sed -i 's|@tomcat.port@|${tomcatPort}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/server.xml
                    sed -i 's|@tomcat.httpsport@|${tomcatHTTPSPort}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/server.xml
                    sed -i 's|@tomcat.jvmRoute@|${tomcatJVMRoute}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/server.xml

                    cat ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/server.xml | grep "Connector port="
                    """)
                    echo "${updatePort}"
                }
            }
        }

        stage('Add User to tomcat-users.xml') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: tomcatCreds, usernameVariable: 'TC_CREDENTIAL_USR', passwordVariable: 'TC_CREDENTIAL_PSW')]) {
                        addTomcatUser = sshExecute("""
                        echo "Adding new user ${tomcatUser} to tomcat-users.xml with roles"

                        # Adding role and user to tomcat-users.xml
                        sed -i 's|@tomcat.usrname@|${tomcatUser}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/tomcat-users.xml
                        sed -i 's|@tomcat.passwd@|${tomcatPasswd}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/tomcat-users.xml
                        sed -i 's|@devops.tcusrname@|${TC_CREDENTIAL_USR}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/tomcat-users.xml
                        sed -i 's|@devops.tcpasswd@|${TC_CREDENTIAL_PSW}|g' ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/tomcat-users.xml
                        echo "Verifying tomcat-users.xml updates"
                        cat ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/conf/tomcat-users.xml | grep -A 5 "<user"
                    """)
                        echo "${addTomcatUser}"
                    }
                }
            }
        }

        // stage('Bootup Tomcat') {
        //     steps {
        //         script {
        //             bootTomcat = sshExecute("""
        //             sh ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}/bin/startup.sh
        //             sleep 3
        //             ps aux | grep ${tomcatPath}/apache-tomcat-${tomcatVersion}-${tomcatClient}
        //             """)
        //             echo "${bootTomcat}"
        //             netCheck(ssh_Server_IP, tomcatPort, 'Tomcat')
        //         }
        //     }
        // }
    }

    post {
        always {
            script {
                if (currentBuild.currentResult == 'FAILURE') {
                    sh 'echo "Build result has changed to FAILURE"'
            // emailext subject: "${FAIL_SUBJECT}",
            // body: "${FAIL_CONTENT}",
            // attachLog: true,
            // to: "${RECIPIENTS_NAME}"
            } else if (currentBuild.currentResult == 'UNSTABLE') {
                    sh 'echo "Build result has changed to UNSTABLE"'
            // emailext subject: "${UNSTABLE_SUBJECT}",
            // body: "${UNSTABLE_CONTENT}",
            // attachLog: true,
            // to: "${RECIPIENTS_NAME}"
            } else if (currentBuild.currentResult == 'SUCCESS') {
                    sh 'echo "Build SUCCESS"'
            /////////////////////////
            // emailext subject: "${PASS_SUBJECT}",
            // body: "${PASS_CONTENT}",
            // attachLog: true,
            // // recipientProviders: [
            // //     [$class: 'CulpritsRecipientProvider'],
            // //     [$class: 'DevelopersRecipientProvider'],
            // //     [$class: 'RequesterRecipientProvider']
            // // ],
            // //replyTo: "${DEFAULT_REPLYTO}",
            // to: "${RECIPIENTS_NAME}"
            //////////////////
            } else if (currentBuild.currentResult == 'ABORTED') {
                    sh 'echo "Build result has changed to ABORTED"'
            // emailext subject: "Build ${BUILD_NUMBER} Aborted",
            // body: 'The build was aborted.',
            // attachLog: true,
            // to: "${RECIPIENTS_NAME}"
            } else {
                    sh 'echo "Build result has changed to UNKNOWN"'
                // emailext subject: "Unknown Build ${BUILD_NUMBER}",
                // body: "Unknown Build ${BUILD_NUMBER} ",
                // attachLog: true,
                // to: "${RECIPIENTS_NAME}"
                }
            }
        }
    }
}

def sshExecute(String cmd) {
    withCredentials([
        usernamePassword(
            credentialsId: ssh_Credentials,
            usernameVariable: 'SSH_USER',
            passwordVariable: 'SSH_PASSWORD'
        )
        ]
    ) {
        def output = sh(
            script: """
                sshpass -p "\$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@${ssh_Server_IP} <<'EOF'
                ${cmd}
EOF
            """,
            returnStdout: true
        ).trim()
        return output
    }
}

def netCheck(String ip, String port, String name) {
    sh """
        echo "Checking ${name} Server availability..."
        nc -zv -w5 ${ip} ${port} || (echo "${name} is not reachable on http://${ip}:${port}, exiting." && exit 1)
        echo "${name} Server is reachable. Continuing with the Test"
    """
}